{"version":3,"file":"modal.js","sourceRoot":"","sources":["../../../../src/modules/modal/components/modal.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Component, Input, OnInit, ViewChild, ElementRef, Renderer2,\r\n    EventEmitter, Output, HostListener, ViewContainerRef, AfterViewInit\r\n} from \"@angular/core\";\r\nimport { Util, IDynamicClasses, KeyCode, SuiComponentFactory } from \"../../../misc/util/index\";\r\nimport { TransitionController, Transition, TransitionDirection } from \"../../transition/index\";\r\nimport { ModalControls, ModalResult } from \"../classes/modal-controls\";\r\nimport { ModalConfig, ModalSize } from \"../classes/modal-config\";\r\n\r\n@Component({\r\n    selector: \"sui-modal\",\r\n    template: `\r\n<!-- Page dimmer for modal background. -->\r\n<sui-dimmer class=\"page\"\r\n            [class.inverted]=\"isInverted\"\r\n            [(isDimmed)]=\"dimBackground\"\r\n            [isClickable]=\"false\"\r\n            [transitionDuration]=\"transitionDuration\"\r\n            [wrapContent]=\"false\"\r\n            (click)=\"close()\">\r\n\r\n    <!-- Modal component, with transition component attached -->\r\n    <div class=\"ui modal\"\r\n         [suiTransition]=\"transitionController\"\r\n         [class.active]=\"transitionController?.isVisible\"\r\n         [class.fullscreen]=\"isFullScreen\"\r\n         [class.basic]=\"isBasic\"\r\n         [class.scroll]=\"mustScroll\"\r\n         [class.inverted]=\"isInverted\"\r\n         [ngClass]=\"dynamicClasses\"\r\n         (click)=\"onClick($event)\"\r\n         #modal>\r\n\r\n        <!-- Configurable close icon -->\r\n        <i class=\"close icon\" *ngIf=\"isClosable\" (click)=\"close()\"></i>\r\n        <!-- <ng-content> so that <sui-modal> can be used as a normal component. -->\r\n        <ng-content></ng-content>\r\n        <!-- @ViewChild reference so we can insert elements beside this div. -->\r\n        <div #templateSibling></div>\r\n    </div>\r\n</sui-dimmer>\r\n`,\r\n    styles: [`\r\n.ui.dimmer {\r\n    overflow-y: auto;\r\n}\r\n\r\n/* avoid .scrolling as Semantic UI adds unwanted styles. */\r\n.scroll {\r\n    position: absolute !important;\r\n    margin-top: 3.5rem !important;\r\n    margin-bottom: 3.5rem !important;\r\n    top: 0;\r\n}\r\n`]\r\n})\r\nexport class SuiModal<T, U> implements OnInit, AfterViewInit {\r\n    @Input()\r\n    // Determines whether the modal can be closed with a close button, clicking outside, or the escape key.\r\n    public isClosable:boolean;\r\n\r\n    @Input()\r\n    // Value to deny with when closing via `isClosable`.\r\n    public closeResult:U;\r\n\r\n    // Separate class for the `approve` and `deny` methods to support passing into components.\r\n    public controls:ModalControls<T, U>;\r\n\r\n    public get approve():ModalResult<T> {\r\n        return this.controls.approve;\r\n    }\r\n\r\n    public get deny():ModalResult<U> {\r\n        return this.controls.deny;\r\n    }\r\n\r\n    // Fires when the modal closes, after `approve` has been called.\r\n    @Output(\"approved\")\r\n    public onApprove:EventEmitter<T>;\r\n\r\n    // Fires when the modal closes, after `deny` has been called.\r\n    @Output(\"denied\")\r\n    public onDeny:EventEmitter<U>;\r\n\r\n    // Fires when the modal closes.\r\n    @Output(\"dismissed\")\r\n    public onDismiss:EventEmitter<void>;\r\n\r\n    @ViewChild(\"modal\")\r\n    private _modalElement:ElementRef;\r\n\r\n    // Size used to display the modal.\r\n    @Input()\r\n    public size:ModalSize;\r\n\r\n    // Whether the modal takes up the full width of the screen.\r\n    private _isFullScreen:boolean;\r\n\r\n    // Value to deny with when closing via `isClosable`.\r\n    @Input()\r\n    public get isFullScreen():boolean {\r\n        return this._isFullScreen;\r\n    }\r\n\r\n    public set isFullScreen(fullScreen:boolean) {\r\n        this._isFullScreen = Util.DOM.parseBooleanAttribute(fullScreen);\r\n    }\r\n\r\n    // Whether or not the modal has basic styles applied.\r\n    @Input()\r\n    public isBasic:boolean;\r\n\r\n    // Whether the modal currently is displaying a scrollbar.\r\n    private _mustScroll:boolean;\r\n    // Whether or not the modal should always display a scrollbar.\r\n    private _mustAlwaysScroll:boolean;\r\n\r\n    @Input()\r\n    public get mustScroll():boolean {\r\n        return this._mustScroll;\r\n    }\r\n\r\n    public set mustScroll(mustScroll:boolean) {\r\n        this._mustScroll = mustScroll;\r\n        // 'Cache' value in _mustAlwaysScroll so that if `true`, _mustScroll isn't ever auto-updated.\r\n        this._mustAlwaysScroll = mustScroll;\r\n        this.updateScroll();\r\n    }\r\n\r\n    // Whether the modal shows against a light background.\r\n    private _isInverted:boolean;\r\n\r\n    @Input()\r\n    public get isInverted():boolean {\r\n        return this._isInverted;\r\n    }\r\n\r\n    public set isInverted(inverted:boolean) {\r\n        this._isInverted = Util.DOM.parseBooleanAttribute(inverted);\r\n    }\r\n\r\n    public transitionController:TransitionController;\r\n\r\n    // Transition to display modal with.\r\n    @Input()\r\n    public transition:string;\r\n\r\n    // Duration of the modal & dimmer transitions.\r\n    @Input()\r\n    public transitionDuration:number;\r\n\r\n    // Whether or not the backround dimmer is active.\r\n    public dimBackground:boolean;\r\n    // True after `approve` or `deny` has been called.\r\n    private _isClosing:boolean;\r\n\r\n    // `ViewContainerRef` for the element the template gets injected as a sibling of.\r\n    @ViewChild(\"templateSibling\", { read: ViewContainerRef })\r\n    public templateSibling:ViewContainerRef;\r\n\r\n    // Parent element of modal before relocation to document body.\r\n    private _originalContainer?:Element;\r\n\r\n    public get dynamicClasses():IDynamicClasses {\r\n        const classes:IDynamicClasses = {};\r\n        if (this.size) {\r\n            classes[this.size] = true;\r\n        }\r\n        return classes;\r\n    }\r\n\r\n    constructor(private _renderer:Renderer2, private _element:ElementRef, private _componentFactory:SuiComponentFactory) {\r\n        // Initialise with default configuration from `ModalConfig` (to avoid writing defaults twice).\r\n        const config = new ModalConfig<undefined, T, U>();\r\n        this.loadConfig(config);\r\n\r\n        // Event emitters for each of the possible modal outcomes.\r\n        this.onApprove = new EventEmitter<T>();\r\n        this.onDeny = new EventEmitter<U>();\r\n        this.onDismiss = new EventEmitter<void>();\r\n\r\n        // Initialise controls with actions for the `approve` and `deny` cases.\r\n        this.controls = new ModalControls<T, U>(\r\n            res => this.dismiss(() => this.onApprove.emit(res)),\r\n            res => this.dismiss(() => this.onDeny.emit(res)));\r\n\r\n        // Internal variable initialisation.\r\n        this.dimBackground = false;\r\n        this._isClosing = false;\r\n        this.transitionController = new TransitionController(false);\r\n    }\r\n\r\n    public ngOnInit():void {\r\n        // Transition the modal to be visible.\r\n        this.transitionController.animate(new Transition(this.transition, this.transitionDuration, TransitionDirection.In));\r\n        setTimeout(() => this.dimBackground = true);\r\n    }\r\n\r\n    public ngAfterViewInit():void {\r\n        // Move the modal to the document body to ensure correct scrolling.\r\n        this._originalContainer = this._element.nativeElement.parentNode;\r\n        document.querySelector(\"body\")!.appendChild(this._element.nativeElement);\r\n        // Remove the #templateSibling element from the DOM to fix bottom border styles.\r\n        const templateElement = this.templateSibling.element.nativeElement as Element;\r\n        if (templateElement.parentNode) {\r\n            templateElement.parentNode.removeChild(templateElement);\r\n        }\r\n\r\n        // Update margin offset to center modal correctly on-screen.\r\n        const element = this._modalElement.nativeElement as Element;\r\n        setTimeout(() => {\r\n            this._renderer.setStyle(element, \"margin-top\", `-${element.clientHeight / 2}px`);\r\n            this.updateScroll();\r\n        });\r\n\r\n        // Focus any element with [autofocus] attribute.\r\n        const autoFocus = element.querySelector(\"[autofocus]\") as HTMLElement | null;\r\n        if (autoFocus) {\r\n            // Autofocus after the browser has had time to process other event handlers.\r\n            setTimeout(() => autoFocus.focus(), 10);\r\n            // Try to focus again when the modal has opened so that autofocus works in IE11.\r\n            setTimeout(() => autoFocus.focus(), this.transitionDuration);\r\n        }\r\n    }\r\n\r\n    // Updates the modal with the specified configuration.\r\n    public loadConfig<V>(config:ModalConfig<V, T, U>):void {\r\n        this.isClosable = config.isClosable;\r\n        this.closeResult = config.closeResult;\r\n\r\n        this.size = config.size;\r\n        this.isFullScreen = config.isFullScreen;\r\n        this.isBasic = config.isBasic;\r\n        this.isInverted = config.isInverted;\r\n\r\n        this.mustScroll = config.mustScroll;\r\n\r\n        this.transition = config.transition;\r\n        this.transitionDuration = config.transitionDuration;\r\n    }\r\n\r\n    // Dismisses the modal with a transition, firing the callback after the modal has finished transitioning.\r\n    private dismiss(callback:() => void = () => {}):void {\r\n        // If we aren't currently closing,\r\n        if (!this._isClosing) {\r\n            this._isClosing = true;\r\n\r\n            // Transition the modal to be invisible.\r\n            this.dimBackground = false;\r\n            this.transitionController.stopAll();\r\n            this.transitionController.animate(\r\n                new Transition(this.transition, this.transitionDuration, TransitionDirection.Out, () => {\r\n                    // When done, move the modal back to its original location, emit a dismiss event, and fire the callback.\r\n                    if (this._originalContainer) {\r\n                        this._originalContainer.appendChild(this._element.nativeElement);\r\n                    }\r\n                    this.onDismiss.emit();\r\n                    callback();\r\n                }));\r\n        }\r\n    }\r\n\r\n    // Closes the modal with a 'deny' outcome, using the specified default reason.\r\n    public close():void {\r\n        if (this.isClosable) {\r\n            // If we are allowed to close, fire the deny result with the default value.\r\n            this.deny(this.closeResult);\r\n        }\r\n    }\r\n\r\n    // Decides whether the modal needs to reposition to allow scrolling.\r\n    private updateScroll():void {\r\n        // Semantic UI modal margin is 3.5rem, which is relative to the global font size, so for compatibility:\r\n        const fontSize = parseFloat(window.getComputedStyle(document.documentElement).getPropertyValue(\"font-size\"));\r\n        const margin = fontSize * 3.5;\r\n\r\n        // _mustAlwaysScroll works by stopping _mustScroll from being automatically updated, so it stays `true`.\r\n        if (!this._mustAlwaysScroll && this._modalElement) {\r\n            const element = this._modalElement.nativeElement as Element;\r\n\r\n            // The modal must scroll if the window height is smaller than the modal height + both margins.\r\n            this._mustScroll = window.innerHeight < element.clientHeight + margin * 2;\r\n        }\r\n    }\r\n\r\n    public onClick(e:MouseEvent):void {\r\n        // Makes sense here, as the modal shouldn't be attached to any DOM element.\r\n        e.stopPropagation();\r\n    }\r\n\r\n    // Document listener is fine here because nobody will enough modals open.\r\n    @HostListener(\"document:keyup\", [\"$event\"])\r\n    public onDocumentKeyUp(e:KeyboardEvent):void {\r\n        if (e.keyCode === KeyCode.Escape) {\r\n            // Close automatically covers case of `!isClosable`, so check not needed.\r\n            this.close();\r\n        }\r\n    }\r\n\r\n    @HostListener(\"window:resize\")\r\n    public onDocumentResize():void {\r\n        this.updateScroll();\r\n    }\r\n}\r\n"]}