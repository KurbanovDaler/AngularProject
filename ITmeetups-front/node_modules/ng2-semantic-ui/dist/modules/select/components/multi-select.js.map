{"version":3,"file":"multi-select.js","sourceRoot":"","sources":["../../../../src/modules/select/components/multi-select.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, HostBinding, ElementRef, EventEmitter, Output, Input, Directive, Renderer2 } from \"@angular/core\";\r\nimport { ICustomValueAccessorHost, KeyCode, customValueAccessorFactory, CustomValueAccessor } from \"../../../misc/util/index\";\r\nimport { SuiLocalizationService } from \"../../../behaviors/localization/index\";\r\nimport { SuiSelectBase } from \"../classes/select-base\";\r\nimport { SuiSelectOption } from \"./select-option\";\r\n\r\n@Component({\r\n    selector: \"sui-multi-select\",\r\n    template: `\r\n<!-- Dropdown icon -->\r\n<i class=\"{{ icon }} icon\" (click)=\"onCaretClick($event)\"></i>\r\n\r\n<ng-container *ngIf=\"hasLabels\">\r\n<!-- Multi-select labels -->\r\n    <sui-multi-select-label *ngFor=\"let selected of selectedOptions;\"\r\n                            [value]=\"selected\"\r\n                            [query]=\"query\"\r\n                            [formatter]=\"configuredFormatter\"\r\n                            [template]=\"optionTemplate\"\r\n                            (deselected)=\"deselectOption($event)\"></sui-multi-select-label>\r\n</ng-container>\r\n\r\n<!-- Query input -->\r\n<input suiSelectSearch\r\n       type=\"text\"\r\n       [hidden]=\"!isSearchable || isSearchExternal\">\r\n\r\n<!-- Helper text -->\r\n<div class=\"text\"\r\n     [class.default]=\"hasLabels\"\r\n     [class.filtered]=\"!!query && !isSearchExternal\">\r\n    \r\n    <!-- Placeholder text -->\r\n    <ng-container *ngIf=\"hasLabels; else selectedBlock\">{{ placeholder }}</ng-container>\r\n    \r\n    <!-- Summary shown when labels are hidden -->\r\n    <ng-template #selectedBlock> {{ selectedMessage }}</ng-template>\r\n</div>\r\n\r\n<!-- Select dropdown menu -->\r\n<div class=\"menu\"\r\n     suiDropdownMenu\r\n     [menuTransition]=\"transition\"\r\n     [menuTransitionDuration]=\"transitionDuration\"\r\n     [menuAutoSelectFirst]=\"true\">\r\n\r\n    <ng-content></ng-content>\r\n    <ng-container *ngIf=\"availableOptions.length == 0 \">\r\n        <div *ngIf=\"!maxSelectedReached\" class=\"message\">{{ localeValues.noResultsMessage }}</div>\r\n        <div *ngIf=\"maxSelectedReached\" class=\"message\">{{ maxSelectedMessage }}</div>\r\n    </ng-container>\r\n</div>\r\n`,\r\n    styles: [`\r\n:host input.search {\r\n    width: 12em !important;\r\n}\r\n`]\r\n})\r\nexport class SuiMultiSelect<T, U> extends SuiSelectBase<T, U> implements ICustomValueAccessorHost<U[]> {\r\n    public selectedOptions:T[];\r\n    // Stores the values written by ngModel before it can be matched to an option from `options`.\r\n    private _writtenOptions?:U[];\r\n\r\n    @Output()\r\n    public selectedOptionsChange:EventEmitter<U[]>;\r\n\r\n    public get filteredOptions():T[] {\r\n        if (this.maxSelectedReached) {\r\n            // If we have reached the maximum number of selections, then empty the results completely.\r\n            return [];\r\n        }\r\n\r\n        const searchResults:T[] = this.searchService.results;\r\n\r\n        if (!this.hasLabels) {\r\n            return searchResults;\r\n        } else {\r\n            // Returns the search results \\ selected options.\r\n            return searchResults\r\n                .filter(r => this.selectedOptions.find(o => r === o) == undefined);\r\n        }\r\n    }\r\n\r\n    public get availableOptions():T[] {\r\n        return this.filteredOptions;\r\n    }\r\n\r\n    private _hasLabels:boolean;\r\n\r\n    @Input()\r\n    public get hasLabels():boolean {\r\n        return this._hasLabels;\r\n    }\r\n\r\n    public set hasLabels(hasLabels:boolean) {\r\n        this._hasLabels = hasLabels;\r\n    }\r\n\r\n    private _placeholder:string;\r\n\r\n    @Input()\r\n    public get placeholder():string {\r\n        return this._placeholder || this.localeValues.multi.placeholder;\r\n    }\r\n\r\n    public set placeholder(placeholder:string) {\r\n        this._placeholder = placeholder;\r\n    }\r\n\r\n    @Input()\r\n    public maxSelected:number;\r\n\r\n    public get maxSelectedReached():boolean {\r\n        if (this.maxSelected == undefined) {\r\n            // If there is no maximum then we can immediately return.\r\n            return false;\r\n        }\r\n        return this.selectedOptions.length === this.maxSelected;\r\n    }\r\n\r\n    public get maxSelectedMessage():string {\r\n        return this._localizationService.interpolate(\r\n            this.localeValues.multi.maxSelectedMessage,\r\n            [[\"max\", this.maxSelected.toString()]]);\r\n    }\r\n\r\n    public get selectedMessage():string {\r\n        return this._localizationService.interpolate(\r\n            this.localeValues.multi.selectedMessage,\r\n            [[\"count\", this.selectedOptions.length.toString()]]);\r\n    }\r\n\r\n    @HostBinding(\"class.multiple\")\r\n    private _multiSelectClasses:boolean;\r\n\r\n    constructor(element:ElementRef, renderer:Renderer2, localizationService:SuiLocalizationService) {\r\n        super(element, renderer, localizationService);\r\n\r\n        this.selectedOptions = [];\r\n        this.selectedOptionsChange = new EventEmitter<U[]>();\r\n\r\n        this.hasLabels = true;\r\n        this._multiSelectClasses = true;\r\n    }\r\n\r\n    protected optionsUpdateHook():void {\r\n        if (!this._writtenOptions && this.selectedOptions.length > 0) {\r\n            // We need to check the options still exist.\r\n            this.writeValue(this.selectedOptions.map(o => this.valueGetter(o)));\r\n        }\r\n\r\n        if (this._writtenOptions && this.searchService.options.length > 0) {\r\n            // If there were values written by ngModel before the options had been loaded, this runs to fix it.\r\n            this.selectedOptions = this._writtenOptions\r\n                // non-null assertion added here because Typescript doesn't recognise the non-null filter.\r\n                .map(v => this.findOption(this.searchService.options, v)!)\r\n                .filter(v => v != undefined);\r\n\r\n            if (this.selectedOptions.length === this._writtenOptions.length) {\r\n                this._writtenOptions = undefined;\r\n            }\r\n        }\r\n    }\r\n\r\n    protected initialiseRenderedOption(option:SuiSelectOption<T>):void {\r\n        super.initialiseRenderedOption(option);\r\n\r\n        // Boldens the item so it appears selected in the dropdown.\r\n        option.isActive = !this.hasLabels && this.selectedOptions.indexOf(option.value) !== -1;\r\n    }\r\n\r\n    public selectOption(option:T):void {\r\n        if (this.selectedOptions.indexOf(option) !== -1) {\r\n            this.deselectOption(option);\r\n            return;\r\n        }\r\n        this.selectedOptions.push(option);\r\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\r\n\r\n        this.resetQuery(false);\r\n\r\n        // Automatically refocus the search input for better keyboard accessibility.\r\n        this.focus();\r\n\r\n        if (!this.hasLabels) {\r\n            this.onAvailableOptionsRendered();\r\n        }\r\n    }\r\n\r\n    public writeValue(values:U[]):void {\r\n        if (values instanceof Array) {\r\n            if (this.searchService.options.length > 0) {\r\n                // If the options have already been loaded, we can immediately match the ngModel values to options.\r\n                this.selectedOptions = values\r\n                    // non-null assertion added here because Typescript doesn't recognise the non-null filter.\r\n                    .map(v => this.findOption(this.searchService.options, v)!)\r\n                    .filter(v => v != undefined);\r\n            }\r\n            if (values.length > 0 && this.selectedOptions.length === 0) {\r\n                if (this.valueField && this.searchService.hasItemLookup) {\r\n                    // If the search service has a selected lookup function, make use of that to load the initial values.\r\n                    this.searchService\r\n                        .initialLookup(values)\r\n                        .then(items => this.selectedOptions = items);\r\n                } else {\r\n                    // Otherwise, cache the written value for when options are set.\r\n                    this._writtenOptions = values;\r\n                }\r\n            }\r\n            if (values.length === 0) {\r\n                this.selectedOptions = [];\r\n            }\r\n        } else {\r\n            this.selectedOptions = [];\r\n        }\r\n    }\r\n\r\n    public deselectOption(option:T):void {\r\n        // Update selected options to the previously selected options \\ {option}.\r\n        this.selectedOptions = this.selectedOptions.filter(so => so !== option);\r\n        this.selectedOptionsChange.emit(this.selectedOptions.map(o => this.valueGetter(o)));\r\n\r\n        // Automatically refocus the search input for better keyboard accessibility.\r\n        this.focus();\r\n\r\n        if (!this.hasLabels) {\r\n            this.onAvailableOptionsRendered();\r\n        }\r\n    }\r\n\r\n    public onQueryInputKeydown(event:KeyboardEvent):void {\r\n        if (event.keyCode === KeyCode.Backspace && this.query === \"\" && this.selectedOptions.length > 0) {\r\n            // Deselect the rightmost option when the user presses backspace in the search input.\r\n            this.deselectOption(this.selectedOptions[this.selectedOptions.length - 1]);\r\n        }\r\n    }\r\n}\r\n\r\n// Value accessor directive for the select to support ngModel.\r\n@Directive({\r\n    selector: \"sui-multi-select\",\r\n    host: {\r\n        \"(selectedOptionsChange)\": \"onChange($event)\",\r\n        \"(touched)\": \"onTouched()\"\r\n    },\r\n    providers: [customValueAccessorFactory(SuiMultiSelectValueAccessor)]\r\n})\r\nexport class SuiMultiSelectValueAccessor<T, U> extends CustomValueAccessor<U[], SuiMultiSelect<T, U>> {\r\n    constructor(host:SuiMultiSelect<T, U>) {\r\n        super(host);\r\n    }\r\n}\r\n"]}