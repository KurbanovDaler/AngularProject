{"version":3,"file":"radio.js","sourceRoot":"","sources":["../../../../src/modules/checkbox/components/radio.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Component, Directive, Input, Output, HostListener, HostBinding,\r\n    EventEmitter, ViewChild, ElementRef, ContentChildren, AfterContentInit, QueryList\r\n} from \"@angular/core\";\r\nimport {\r\n    ICustomValueAccessorHost, customValueAccessorFactory, CustomValueAccessor,\r\n    Util\r\n} from \"../../../misc/util/index\";\r\nimport { Subscription } from \"rxjs/Subscription\";\r\n\r\n@Component({\r\n    selector: \"sui-radio-button\",\r\n    template: `\r\n<input class=\"hidden\"\r\n       type=\"checkbox\"\r\n       [attr.name]=\"name\"\r\n       [attr.checked]=\"checkedAttribute\"\r\n       [attr.disabled]=\"isDisabledAttribute\"\r\n       [ngModel]=\"isChecked\"\r\n       (ngModel)=\"currentValue = value\"\r\n       #radio>\r\n<label>\r\n    <ng-content></ng-content>\r\n</label>\r\n`\r\n})\r\nexport class SuiRadio<T> implements ICustomValueAccessorHost<T> {\r\n    @HostBinding(\"class.ui\")\r\n    @HostBinding(\"class.radio\")\r\n    @HostBinding(\"class.checkbox\")\r\n    private _radioClasses:boolean = true;\r\n\r\n    @Input()\r\n    public name:string;\r\n\r\n    @Input()\r\n    public value:T;\r\n\r\n    @HostBinding(\"class.checked\")\r\n    public isChecked:boolean;\r\n\r\n    public currentValue:T;\r\n\r\n    @Output(\"currentValueChange\")\r\n    public onCurrentValueChange:EventEmitter<T>;\r\n\r\n    @Output(\"touched\")\r\n    public onTouched:EventEmitter<void>;\r\n\r\n    @Input()\r\n    public isDisabled:boolean;\r\n\r\n    @HostBinding(\"class.read-only\")\r\n    @Input()\r\n    public isReadonly:boolean;\r\n\r\n    @ViewChild(\"radio\")\r\n    private _radioElement:ElementRef;\r\n\r\n    public get checkedAttribute():string | undefined {\r\n        return this.isChecked ? \"\" : undefined;\r\n    }\r\n\r\n    public get isDisabledAttribute():string | undefined {\r\n        return this.isDisabled ? \"disabled\" : undefined;\r\n    }\r\n\r\n    constructor() {\r\n        this.isChecked = false;\r\n        this.onCurrentValueChange = new EventEmitter<T>();\r\n        this.onTouched = new EventEmitter<void>();\r\n\r\n        this.isDisabled = false;\r\n        this.isReadonly = false;\r\n\r\n        this._radioClasses = true;\r\n    }\r\n\r\n    @HostListener(\"mousedown\", [\"$event\"])\r\n    public onMouseDown(e:MouseEvent):void {\r\n        e.preventDefault();\r\n    }\r\n\r\n    @HostListener(\"click\")\r\n    public onClick():void {\r\n        if (!this.isDisabled && !this.isReadonly) {\r\n            this.currentValue = this.value;\r\n            this.onCurrentValueChange.emit(this.currentValue);\r\n            this.update();\r\n            this.focusRadio();\r\n        }\r\n    }\r\n\r\n    @HostListener(\"focusout\")\r\n    public onFocusOut():void {\r\n        this.onTouched.emit();\r\n    }\r\n\r\n    public update():void {\r\n        this.isChecked = this.currentValue === this.value;\r\n    }\r\n\r\n    public writeValue(value:T):void {\r\n        this.currentValue = value;\r\n        this.update();\r\n    }\r\n\r\n    private focusRadio():void {\r\n        this._radioElement.nativeElement.focus();\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: \"sui-radio-button\",\r\n    host: {\r\n        \"(currentValueChange)\": \"onChange($event)\",\r\n        \"(touched)\": \"onTouched()\"\r\n    },\r\n    providers: [customValueAccessorFactory(SuiRadioValueAccessor)]\r\n})\r\nexport class SuiRadioValueAccessor<T> extends CustomValueAccessor<T, SuiRadio<T>> {\r\n    constructor(host:SuiRadio<T>) {\r\n        super(host);\r\n    }\r\n}\r\n"]}