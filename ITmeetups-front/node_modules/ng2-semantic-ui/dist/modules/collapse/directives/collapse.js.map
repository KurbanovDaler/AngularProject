{"version":3,"file":"collapse.js","sourceRoot":"","sources":["../../../../src/modules/collapse/directives/collapse.ts"],"names":[],"mappings":"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","sourcesContent":["import { Directive, ElementRef, Input, HostBinding, Renderer2 } from \"@angular/core\";\r\n\r\n@Directive({\r\n    selector: \"[suiCollapse]\"\r\n})\r\nexport class SuiCollapse {\r\n    // Set when the collapse is open, and not animating.\r\n    @HostBinding(\"class.expanded\")\r\n    private _isExpanded:boolean;\r\n\r\n    // Set when the collapse is closed, and not animating.\r\n    @HostBinding(\"class.collapsed\")\r\n    private get _isCollapsed():boolean {\r\n        return !this._isExpanded && !this._isCollapsing;\r\n    }\r\n\r\n    // Set when the collapse is animating.\r\n    @HostBinding(\"class.collapsing\")\r\n    private _isCollapsing:boolean;\r\n\r\n    // Flag that is initially true, to make the 1st animation instantaneous.\r\n    private _pristine:boolean;\r\n\r\n    @Input()\r\n    public get suiCollapse():boolean {\r\n        return this._isExpanded;\r\n    }\r\n\r\n    // Sets the state of the collapse, `true` is collapsed.\r\n    public set suiCollapse(value:boolean) {\r\n        if (value) {\r\n            this.hide();\r\n        } else {\r\n            this.show();\r\n        }\r\n    }\r\n\r\n    @Input()\r\n    public collapseDuration:number;\r\n\r\n    private get _animationDuration():number {\r\n        return this._pristine ? 0 : this.collapseDuration;\r\n    }\r\n\r\n    public constructor(private _element:ElementRef, private _renderer:Renderer2) {\r\n        this._pristine = true;\r\n\r\n        // Collapse animation duration is 350ms by default.\r\n        this.collapseDuration = 350;\r\n\r\n        this._isExpanded = false;\r\n        this._isCollapsing = false;\r\n    }\r\n\r\n    public hide():void {\r\n        this._isCollapsing = true;\r\n        this._isExpanded = false;\r\n\r\n        // Forcibly hide the overflow so that content is not visible past the boundaries of its container.\r\n        this._renderer.setStyle(this._element.nativeElement, \"overflow\", \"hidden\");\r\n\r\n        // Animate the host element from its scroll height to 0.\r\n        this.animate(this._element.nativeElement.scrollHeight, 0, false, () => {\r\n            this._isCollapsing = false;\r\n        });\r\n    }\r\n\r\n    public show():void {\r\n        this._isCollapsing = true;\r\n\r\n        // Animate the host element from its offset height to its scroll height.\r\n        this.animate(this._element.nativeElement.offsetHeight, this._element.nativeElement.scrollHeight, true, () => {\r\n            // Remove the overflow override to enable user styling once again.\r\n            this._renderer.removeStyle(this._element.nativeElement, \"overflow\");\r\n\r\n            this._isCollapsing = false;\r\n            this._isExpanded = true;\r\n        });\r\n    }\r\n\r\n    private animate(startHeight:number, endHeight:number, removeOnComplete:boolean = false, callback:() => void = () => {}):void {\r\n        const heightFrames = [\r\n            {\r\n                offset: 0,\r\n                height: `${startHeight}px`\r\n            },\r\n            {\r\n                offset: 1,\r\n                height: `${endHeight}px`\r\n            }\r\n        ];\r\n\r\n        if (removeOnComplete) {\r\n            heightFrames.push({\r\n                offset: 1,\r\n                height: `auto`\r\n            });\r\n        }\r\n\r\n        // Animate the collapse using the web animations API.\r\n        // Using directly because Renderer2 doesn't have invokeElementMethod method anymore.\r\n        this._element.nativeElement.animate(\r\n            heightFrames,\r\n            {\r\n                delay: 0,\r\n                // Disable animation on 1st collapse / expansion.\r\n                duration: this._animationDuration,\r\n                iterations: 1,\r\n                easing: \"ease\",\r\n                fill: \"both\"\r\n            }\r\n        );\r\n\r\n        if (this._pristine) {\r\n            // Remove pristine flag when first hit.\r\n            this._pristine = false;\r\n        }\r\n\r\n        setTimeout(() => callback(), this.collapseDuration);\r\n    }\r\n}\r\n"]}