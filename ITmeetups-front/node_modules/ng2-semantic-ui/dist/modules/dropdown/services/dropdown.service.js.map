{"version":3,"file":"dropdown.service.js","sourceRoot":"","sources":["../../../../src/modules/dropdown/services/dropdown.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { EventEmitter } from \"@angular/core\";\r\n\r\nexport type DropdownAutoCloseType = \"itemClick\" | \"outsideClick\" | \"disabled\";\r\n\r\n// Creates essentially a 'string' enum.\r\nexport const DropdownAutoCloseType = {\r\n    ItemClick: \"itemClick\" as DropdownAutoCloseType,\r\n    OutsideClick: \"outsideClick\" as DropdownAutoCloseType,\r\n    Disabled: \"disabled\" as DropdownAutoCloseType\r\n};\r\n\r\nexport class DropdownService {\r\n    // Open state of the dropdown\r\n    public isOpen:boolean;\r\n    // Animating state of the dropdown.\r\n    public isAnimating:boolean;\r\n    // Emitter for when dropdown open state changes.\r\n    public isOpenChange:EventEmitter<boolean>;\r\n\r\n    public isDisabled:boolean;\r\n\r\n    // Sets the \"autoclose\" mode of the dropdown - i.e. what user action causes it to autoclose.\r\n    public autoCloseMode:DropdownAutoCloseType;\r\n\r\n    // Keep track of the containing dropdown so we can open it as necessary.\r\n    public parent?:DropdownService;\r\n    // Also keep track of dropdowns nested in this one so we can close them as necessary.\r\n    public children:DropdownService[];\r\n    public get isNested():boolean {\r\n        return !!this.parent;\r\n    }\r\n\r\n    constructor(autoCloseMode:DropdownAutoCloseType = DropdownAutoCloseType.ItemClick) {\r\n        this.isOpen = false;\r\n        this.isOpenChange = new EventEmitter<boolean>();\r\n\r\n        this.isDisabled = false;\r\n\r\n        this.autoCloseMode = autoCloseMode;\r\n\r\n        this.children = [];\r\n    }\r\n\r\n    public setOpenState(isOpen:boolean, reflectInParent:boolean = false):void {\r\n        if (this.isOpen !== isOpen && !this.isDisabled) {\r\n            // Only update the state if it has changed, and the dropdown isn't disabled.\r\n            this.isOpen = !!isOpen;\r\n            this.isAnimating = true;\r\n            // We must delay the emitting to avoid the 'changed after checked' Angular errors.\r\n            this.delay(() => this.isOpenChange.emit(this.isOpen));\r\n\r\n            if (!this.isOpen) {\r\n                // Close the child dropdowns when this one closes.\r\n                this.children.forEach(c => c.setOpenState(this.isOpen));\r\n            }\r\n\r\n            if (this.parent && reflectInParent) {\r\n                // Open the parent dropdowns when this one opens.\r\n                this.parent.setOpenState(this.isOpen, true);\r\n            }\r\n        } else if (this.isOpen !== isOpen && this.isDisabled) {\r\n            // If the state has changed, but the dropdown is disabled, re-emit the original isOpen value.\r\n            this.delay(() => this.isOpenChange.emit(this.isOpen));\r\n        }\r\n    }\r\n\r\n    public setDisabledState(isDisabled:boolean):void {\r\n        if (this.isDisabled !== isDisabled) {\r\n            if (!!isDisabled) {\r\n                // Close the dropdown as it is now disabled\r\n                this.setOpenState(false);\r\n            }\r\n\r\n            this.isDisabled = !!isDisabled;\r\n        }\r\n    }\r\n\r\n    public toggleOpenState():void {\r\n        this.setOpenState(!this.isOpen);\r\n    }\r\n\r\n    // Registers a dropdown service as a child of this service.\r\n    public registerChild(child:DropdownService):void {\r\n        if (!this.isChildRegistered(child)) {\r\n            this.children.push(child);\r\n            child.parent = this;\r\n        }\r\n    }\r\n\r\n    // Recursive method to check if the provided dropdown is already registered as a child, or is a descendant of a child.\r\n    public isChildRegistered(child:DropdownService):boolean {\r\n        return this === child || !!this.children\r\n            .find(c => !!c.children\r\n                .find(cChild => cChild.isChildRegistered(child)));\r\n    }\r\n\r\n    // Wipes any nested data, so all services can be cleanly reattached.\r\n    public clearChildren():void {\r\n        this.children.forEach(c => {\r\n            c.parent = undefined;\r\n        });\r\n        this.children = [];\r\n    }\r\n\r\n    // Method for delaying an event into the next tick, to avoid Angular \"changed after checked\" error.\r\n    private delay(callback:() => void):void {\r\n        setTimeout(() => callback());\r\n    }\r\n}\r\n"]}