{"version":3,"file":"dimmer.js","sourceRoot":"","sources":["../../../../src/modules/dimmer/components/dimmer.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EACH,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,EAAE,SAAS,EAC5E,UAAU,EAAE,iBAAiB,EAChC,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,oBAAoB,EAAE,aAAa,EAAE,mBAAmB,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;;IAiB/E,6BAAa;IAmDxC,mBAAY,QAAkB,EAAE,OAAkB,EAAE,cAAgC;QAApF,YACI,kBAAM,QAAQ,EAAE,OAAO,EAAE,cAAc,CAAC,SAS3C;QAPG,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,KAAI,CAAC,cAAc,GAAG,IAAI,YAAY,EAAW,CAAC;QAClD,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC;QAExB,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;KAC9B;0BAlDU,+BAAQ;;YACf,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;;aAG1B,UAAoB,KAAa;YAC7B,IAAM,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC;YAEzB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC;;gBAE9B,IAAI,CAAC,qBAAqB,GAAG,IAAI,oBAAoB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBAEzE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;gBAEzD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;aAC7B;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;gBAErC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;gBAE1B,IAAI,CAAC,qBAAqB,CAAC,OAAO,EAAE,CAAC;gBACrC,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAC9B,IAAI,UAAU,CAAC,MAAM,EAAE,IAAI,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC;aACrH;SACJ;;;;IA+BO,2BAAO;QACX,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC3C;;;gBAnFR,SAAS,SAAC;oBACP,QAAQ,EAAE,YAAY;oBACtB,QAAQ,EAAE,4IAMb;oBACG,MAAM,EAAE,CAAC,8CAIZ,CAAC;iBACD;;;;gBAnBsE,SAAS;gBAC5E,UAAU;gBAAE,iBAAiB;;;mCAoB5B,WAAW,SAAC,UAAU,cACtB,WAAW,SAAC,cAAc;6BAO1B,WAAW,SAAC,cAAc,cAC1B,KAAK;mCAyBL,MAAM;gCAGN,KAAK;+BAGL,KAAK;uCAGL,KAAK;gCAIL,KAAK;4BAeL,YAAY,SAAC,OAAO;;oBApFzB;EAqB+B,aAAa;SAA/B,SAAS","sourcesContent":["import {\r\n    Component, Input, Output, HostBinding, HostListener, EventEmitter, Renderer2,\r\n    ElementRef, ChangeDetectorRef\r\n} from \"@angular/core\";\r\nimport { TransitionController, SuiTransition, TransitionDirection, Transition } from \"../../transition/index\";\r\n\r\n@Component({\r\n    selector: \"sui-dimmer\",\r\n    template: `\r\n<div [class.content]=\"wrapContent\">\r\n    <div [class.center]=\"wrapContent\">\r\n        <ng-content></ng-content>\r\n    </div>\r\n</div>\r\n`,\r\n    styles: [`\r\n:host.dimmer {\r\n    transition: none;\r\n}\r\n`]\r\n})\r\nexport class SuiDimmer extends SuiTransition {\r\n    @HostBinding(\"class.ui\")\r\n    @HostBinding(\"class.dimmer\")\r\n    private _dimmerClasses:boolean;\r\n\r\n    private _transitionController:TransitionController;\r\n\r\n    private _isDimmed:boolean;\r\n\r\n    @HostBinding(\"class.active\")\r\n    @Input()\r\n    public get isDimmed():boolean {\r\n        return this._isDimmed;\r\n    }\r\n\r\n    public set isDimmed(value:boolean) {\r\n        const isDimmed = !!value;\r\n\r\n        if (!this._transitionController) {\r\n            // Initialise transition functionality when first setting dimmed, to ensure initial state doesn't transition.\r\n            this._transitionController = new TransitionController(isDimmed, \"block\");\r\n\r\n            this.setTransitionController(this._transitionController);\r\n\r\n            this._isDimmed = isDimmed;\r\n        } else if (this._isDimmed !== isDimmed) {\r\n\r\n            this._isDimmed = isDimmed;\r\n\r\n            this._transitionController.stopAll();\r\n            this._transitionController.animate(\r\n                new Transition(\"fade\", this.transitionDuration, isDimmed ? TransitionDirection.In : TransitionDirection.Out));\r\n        }\r\n    }\r\n\r\n    @Output()\r\n    public isDimmedChange:EventEmitter<boolean>;\r\n\r\n    @Input()\r\n    public isClickable:boolean;\r\n\r\n    @Input()\r\n    public transition:string;\r\n\r\n    @Input()\r\n    public transitionDuration:number;\r\n\r\n    /* Internal for now */\r\n    @Input()\r\n    public wrapContent:boolean;\r\n\r\n    constructor(renderer:Renderer2, element:ElementRef, changeDetector:ChangeDetectorRef) {\r\n        super(renderer, element, changeDetector);\r\n\r\n        this._isDimmed = false;\r\n        this.isDimmedChange = new EventEmitter<boolean>();\r\n        this.isClickable = true;\r\n\r\n        this.wrapContent = true;\r\n\r\n        this._dimmerClasses = true;\r\n    }\r\n\r\n    @HostListener(\"click\")\r\n    private onClick():void {\r\n        if (this.isClickable) {\r\n            this.isDimmed = false;\r\n            this.isDimmedChange.emit(this.isDimmed);\r\n        }\r\n    }\r\n}\r\n"]}