{"version":3,"file":"progress.js","sourceRoot":"","sources":["../../../../src/modules/progress/components/progress.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, Input, HostBinding } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"sui-progress\",\r\n    template: `\r\n<div class=\"bar\" [style.width.%]=\"percentage\">\r\n    <div class=\"progress\" *ngIf=\"showProgress\">{{ percentage }}%</div>\r\n</div>\r\n<div class=\"label\">\r\n    <ng-content></ng-content>\r\n</div>\r\n`,\r\n    styles: [`\r\n.bar {\r\n    transition-duration: 300ms !important;\r\n    z-index: 1;\r\n}\r\n`]\r\n})\r\nexport class SuiProgress {\r\n    @HostBinding(\"class.ui\")\r\n    @HostBinding(\"class.progress\")\r\n    private _popupClasses:boolean = true;\r\n\r\n    private _value:number;\r\n    private _maximum:number;\r\n    private _precision:number;\r\n\r\n    private _overrideSuccess:boolean;\r\n\r\n    @Input()\r\n    public autoSuccess:boolean;\r\n\r\n    @Input()\r\n    public showProgress:boolean;\r\n\r\n    @Input()\r\n    public get value():number {\r\n        return this._value;\r\n    }\r\n\r\n    public set value(value:number) {\r\n        // Convert value from string to number where necessary.\r\n        const converted = +value;\r\n\r\n        if (Number.isNaN(converted)) {\r\n            return;\r\n        }\r\n\r\n        this._value = converted;\r\n    }\r\n\r\n    @Input()\r\n    public get maximum():number {\r\n        return this._maximum;\r\n    }\r\n\r\n    public set maximum(value:number) {\r\n        // Convert value from string to number where necessary.\r\n        const converted = +value;\r\n\r\n        if (Number.isNaN(converted)) {\r\n            return;\r\n        }\r\n\r\n        this._maximum = converted;\r\n    }\r\n\r\n    @Input()\r\n    public get precision():number {\r\n        return this._precision;\r\n    }\r\n\r\n    public set precision(value:number) {\r\n        // Convert value from string to number where necessary.\r\n        const converted = +value;\r\n\r\n        if (Number.isNaN(converted)) {\r\n            return;\r\n        }\r\n\r\n        this._precision = Math.min(Math.max(converted, 0), 20);\r\n    }\r\n\r\n    @HostBinding(\"class.success\")\r\n    private get _reachedMaximum():boolean {\r\n        return this._overrideSuccess || ((this.value >= this.maximum) && this.autoSuccess);\r\n    }\r\n\r\n    @HostBinding(\"attr.data-percent\")\r\n    public get percentage():string {\r\n        const boundedValue = Math.min(Math.max(this.value, 0), this.maximum);\r\n\r\n        const percentage = (boundedValue / this.maximum) * 100;\r\n\r\n        return percentage.toFixed(this.precision);\r\n    }\r\n\r\n    @Input(\"class\")\r\n    public set classValue(classes:string) {\r\n        if (classes.includes(\"attached\") || classes.includes(\"tiny\")) {\r\n            this.showProgress = false;\r\n        }\r\n        if (classes.includes(\"success\")) {\r\n            this._overrideSuccess = true;\r\n        }\r\n    }\r\n\r\n    constructor() {\r\n        this.value = 0;\r\n        this.maximum = 100;\r\n        this.precision = 0;\r\n\r\n        this._overrideSuccess = false;\r\n        this.autoSuccess = true;\r\n        this.showProgress = true;\r\n\r\n        this._popupClasses = true;\r\n    }\r\n}\r\n"]}