{"version":3,"file":"transition.js","sourceRoot":"","sources":["../../../../src/modules/transition/directives/transition.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,iBAAiB,EAAE,MAAM,eAAe,CAAC;AACxG,OAAO,EAAE,oBAAoB,EAAE,MAAM,kCAAkC,CAAC;;IAmCpE,uBAAoB,SAAmB,EAAU,QAAmB,EAAU,eAAiC;QAA3F,cAAS,GAAT,SAAS,CAAU;QAAU,aAAQ,GAAR,QAAQ,CAAW;QAAU,oBAAe,GAAf,eAAe,CAAkB;+BAlB9E,IAAI;KAkB8E;0BAxBxG,wCAAa;uBAAC,EAAuB;;YAE5C,IAAI,CAAC,uBAAuB,CAAC,EAAE,CAAC,CAAC;;;;;0BAO1B,oCAAS;;YAChB,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,SAAS,CAAC;aACrC;YACD,MAAM,CAAC,KAAK,CAAC;;;;;0BAIN,mCAAQ;;YACf,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC;aACpC;YACD,MAAM,CAAC,KAAK,CAAC;;;;;IAKjB,wEAAwE;;IACjE,+CAAuB;;IAA9B,UAA+B,oBAAyC;QACpE,IAAI,CAAC,WAAW,GAAG,oBAAoB,CAAC;QACxC,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClD,IAAI,CAAC,WAAW,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,CAAC,sBAAsB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;KACjE;;gBAzCJ,SAAS,SAAC;oBACP,QAAQ,EAAE,iBAAiB;oBAC3B,QAAQ,EAAE,YAAY;iBACzB;;;;gBANQ,SAAS;gBAAE,UAAU;gBAAiC,iBAAiB;;;kCAW3E,KAAK;oCAML,WAAW,SAAC,kBAAkB;8BAG9B,WAAW,SAAC,eAAe;6BAQ3B,WAAW,SAAC,cAAc;;wBA5B/B;;SAOa,aAAa","sourcesContent":["import { Renderer2, ElementRef, Directive, Input, HostBinding, ChangeDetectorRef } from \"@angular/core\";\r\nimport { TransitionController } from \"../classes/transition-controller\";\r\n\r\n@Directive({\r\n    selector: \"[suiTransition]\",\r\n    exportAs: \"transition\"\r\n})\r\nexport class SuiTransition {\r\n    // Each transition must have a controller associated that dispatches the transitions.\r\n    private _controller:TransitionController;\r\n\r\n    @Input()\r\n    public set suiTransition(tC:TransitionController) {\r\n        // Set the transition controller (e.g. '<div [suiTransition]=\"transitionController\"></div>').\r\n        this.setTransitionController(tC);\r\n    }\r\n\r\n    @HostBinding(\"class.transition\")\r\n    public transitionClass:boolean = true;\r\n\r\n    @HostBinding(\"class.visible\")\r\n    public get isVisible():boolean {\r\n        if (this._controller) {\r\n            return this._controller.isVisible;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    @HostBinding(\"class.hidden\")\r\n    public get isHidden():boolean {\r\n        if (this._controller) {\r\n            return this._controller.isHidden;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructor(private _renderer:Renderer2, private _element:ElementRef, private _changeDetector:ChangeDetectorRef) {}\r\n\r\n    // Initialises the controller with the injected renderer and elementRef.\r\n    public setTransitionController(transitionController:TransitionController):void {\r\n        this._controller = transitionController;\r\n        this._controller.registerRenderer(this._renderer);\r\n        this._controller.registerElement(this._element.nativeElement);\r\n        this._controller.registerChangeDetector(this._changeDetector);\r\n    }\r\n}\r\n"]}