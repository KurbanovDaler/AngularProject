{"version":3,"file":"input.directive.js","sourceRoot":"","sources":["../../../../src/modules/datepicker/directives/input.directive.ts"],"names":[],"mappings":"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","sourcesContent":["\r\nimport { Directive, Host, Input, ElementRef, HostBinding, HostListener } from \"@angular/core\";\r\nimport { DateUtil, DatePrecision } from \"../../../misc/util/index\";\r\nimport { SuiLocalizationService } from \"../../../behaviors/localization/index\";\r\nimport { PopupTrigger } from \"../../popup/index\";\r\nimport { SuiDatepickerDirective, SuiDatepickerDirectiveValueAccessor } from \"./datepicker.directive\";\r\nimport { InternalDateParser, DateParser } from \"../classes/date-parser\";\r\nimport * as bowser from \"bowser\";\r\n\r\nimport \"../helpers/is-webview\";\r\nimport * as isUAWebView from \"is-ua-webview\";\r\nconst isWebView = isUAWebView[\"default\"] || isUAWebView;\r\n\r\n@Directive({\r\n    selector: \"input[suiDatepicker]\"\r\n})\r\nexport class SuiDatepickerInputDirective {\r\n    private _useNativeOnMobile:boolean;\r\n\r\n    @Input(\"pickerUseNativeOnMobile\")\r\n    public get useNativeOnMobile():boolean {\r\n        return this._useNativeOnMobile;\r\n    }\r\n\r\n    public set useNativeOnMobile(fallback:boolean) {\r\n        this._useNativeOnMobile = fallback;\r\n        const isOnMobile = bowser.mobile || bowser.tablet || isWebView(navigator.userAgent);\r\n        this.fallbackActive = this.useNativeOnMobile && isOnMobile;\r\n    }\r\n\r\n    private _fallbackActive:boolean;\r\n\r\n    public get fallbackActive():boolean {\r\n        return this._fallbackActive;\r\n    }\r\n\r\n    public set fallbackActive(active:boolean) {\r\n        this._fallbackActive = active;\r\n        // If the fallback is active, then the trigger must be manual so the datepicker never opens.\r\n        this.datepicker.popup.config.trigger = this.fallbackActive ? PopupTrigger.Manual : PopupTrigger.Focus;\r\n        // Update the input value (this will insert the `T` as required).\r\n        this.updateValue(this.selectedDateString);\r\n    }\r\n\r\n    public get parser():DateParser {\r\n        if (this.fallbackActive) {\r\n            return new InternalDateParser(this.datepicker.mode, this.datepicker.localeValues);\r\n        }\r\n        return new DateParser(this.datepicker.localeValues.formats[this.datepicker.mode], this.datepicker.localeValues);\r\n    }\r\n\r\n    private _currentInputValue:string | undefined;\r\n    private _lastUpdateTyped:boolean;\r\n\r\n    public get selectedDateString():string | undefined {\r\n        if (this.datepicker.selectedDate) {\r\n            return this.parser.format(this.datepicker.selectedDate);\r\n        }\r\n    }\r\n\r\n    @HostBinding(\"attr.type\")\r\n    public get type():string {\r\n        if (this.fallbackActive) {\r\n            return this.datepicker.config.fallback;\r\n        }\r\n        return \"text\";\r\n    }\r\n\r\n    @HostBinding(\"attr.max\")\r\n    public get max():string | undefined {\r\n        if (this.fallbackActive && this.datepicker.maxDate) {\r\n            // Since HTML doesn't use a date object max is somewhat tricky.\r\n            // Our Datepicker will always choose the 1st date on the provided precision,\r\n            // meaning anything below the maxDate will work, hence endOf.\r\n            const max = DateUtil.endOf(this.datepicker.config.precision, DateUtil.clone(this.datepicker.maxDate));\r\n            return this.parser.format(max);\r\n        }\r\n    }\r\n\r\n    @HostBinding(\"attr.min\")\r\n    public get min():string | undefined {\r\n        if (this.fallbackActive && this.datepicker.minDate) {\r\n            // Since HTML doesn't use a date object min is somewhat tricky.\r\n            // We use 1 minute before the next date at the configured precision since\r\n            // our Datepicker picks the first available date at that precision.\r\n            const min = DateUtil.clone(this.datepicker.minDate);\r\n            return this.parser.format(min);\r\n        }\r\n    }\r\n\r\n    constructor(@Host() public datepicker:SuiDatepickerDirective,\r\n                @Host() public valueAccessor:SuiDatepickerDirectiveValueAccessor,\r\n                public element:ElementRef,\r\n                localizationService:SuiLocalizationService) {\r\n        this.useNativeOnMobile = true;\r\n        this.fallbackActive = false;\r\n\r\n        // Whenever the datepicker value updates, update the input text alongside it.\r\n        this.datepicker.onSelectedDateChange.subscribe(() =>\r\n            this.updateValue(this.selectedDateString));\r\n\r\n        localizationService.onLanguageUpdate.subscribe(() =>\r\n            this.updateValue(this.selectedDateString));\r\n    }\r\n\r\n    private updateValue(value:string | undefined):void {\r\n        // Only update the current value if it is different to what it's being updated to.\r\n        // This is so that the editing position isn't changed when manually typing the date.\r\n        if (!this._lastUpdateTyped) {\r\n            this.datepicker.renderer.setProperty(this.element.nativeElement, \"value\", value || \"\");\r\n        }\r\n\r\n        this._lastUpdateTyped = false;\r\n    }\r\n\r\n    @HostListener(\"input\", [\"$event.target.value\"])\r\n    public typeValue(value:string | undefined):void {\r\n        this._lastUpdateTyped = true;\r\n        this._currentInputValue = value;\r\n\r\n        if (!value) {\r\n            // Delete the selected date if no date was entered manually.\r\n            return this.datepicker.writeValue(undefined);\r\n        }\r\n\r\n        const parsed = this.parser.parse(value, this.datepicker.selectedDate);\r\n        if (!isNaN(parsed.getTime()) && value === this.parser.format(parsed)) {\r\n            return this.datepicker.writeValue(parsed);\r\n        }\r\n        return this.datepicker.writeValue(undefined);\r\n    }\r\n\r\n    @HostListener(\"focusout\")\r\n    public onFocusOut():void {\r\n        this.valueAccessor.onTouched();\r\n    }\r\n}\r\n"]}