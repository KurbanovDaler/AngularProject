{"version":3,"file":"datepicker.directive.js","sourceRoot":"","sources":["../../../../src/modules/datepicker/directives/datepicker.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    Directive, ElementRef, Renderer2, EventEmitter, Output, Input,\r\n    HostListener, OnChanges, SimpleChanges\r\n} from \"@angular/core\";\r\nimport { AbstractControl, ValidationErrors } from \"@angular/forms\";\r\nimport {\r\n    ICustomValueAccessorHost, customValueAccessorFactory, CustomValueAccessor,\r\n    ICustomValidatorHost, customValidatorFactory, CustomValidator, PositioningPlacement, SuiComponentFactory, KeyCode\r\n} from \"../../../misc/util/index\";\r\nimport { IDatepickerLocaleValues, RecursivePartial, SuiLocalizationService } from \"../../../behaviors/localization/index\";\r\nimport { SuiPopupComponentController, PopupAfterOpen, PopupConfig, PopupTrigger } from \"../../popup/index\";\r\nimport { SuiDatepicker, DatepickerMode } from \"../components/datepicker\";\r\nimport { CalendarConfig, YearConfig, MonthConfig, DatetimeConfig, TimeConfig, DateConfig } from \"../classes/calendar-config\";\r\n\r\n@Directive({\r\n    selector: \"[suiDatepicker]\",\r\n    providers: [customValidatorFactory(SuiDatepickerDirective)]\r\n})\r\nexport class SuiDatepickerDirective\r\n       extends SuiPopupComponentController<SuiDatepicker>\r\n       implements ICustomValueAccessorHost<Date>, ICustomValidatorHost, OnChanges, PopupAfterOpen {\r\n\r\n    private _selectedDate?:Date;\r\n\r\n    public get selectedDate():Date | undefined {\r\n        return this._selectedDate;\r\n    }\r\n\r\n    public set selectedDate(date:Date | undefined) {\r\n        this._selectedDate = date;\r\n        this.onSelectedDateChange.emit(date);\r\n    }\r\n\r\n    private _mode:DatepickerMode;\r\n    public config:CalendarConfig;\r\n\r\n    @Input(\"pickerMode\")\r\n    public get mode():DatepickerMode {\r\n        return this._mode;\r\n    }\r\n\r\n    public set mode(mode:DatepickerMode) {\r\n        this._mode = mode || DatepickerMode.Datetime;\r\n        switch (this._mode) {\r\n            case DatepickerMode.Year:\r\n                this.config = new YearConfig();\r\n                break;\r\n            case DatepickerMode.Month:\r\n                this.config = new MonthConfig();\r\n                break;\r\n            case DatepickerMode.Date:\r\n            default:\r\n                this.config = new DateConfig();\r\n                break;\r\n            case DatepickerMode.Datetime:\r\n                this.config = new DatetimeConfig();\r\n                break;\r\n            case DatepickerMode.Time:\r\n                this.config = new TimeConfig();\r\n                break;\r\n        }\r\n        this.writeValue(this.selectedDate);\r\n    }\r\n\r\n    @Input(\"pickerInitialDate\")\r\n    public initialDate?:Date;\r\n\r\n    @Input(\"pickerMaxDate\")\r\n    public maxDate?:Date;\r\n\r\n    @Input(\"pickerMinDate\")\r\n    public minDate?:Date;\r\n\r\n    @Input(\"pickerFirstDayOfWeek\")\r\n    public firstDayOfWeek?:number;\r\n\r\n    private _localeValues:IDatepickerLocaleValues;\r\n\r\n    @Input(\"pickerLocaleOverrides\")\r\n    public localeOverrides:RecursivePartial<IDatepickerLocaleValues>;\r\n\r\n    public get localeValues():IDatepickerLocaleValues {\r\n        return this.localizationService.override<\"datepicker\">(this._localeValues, this.localeOverrides);\r\n    }\r\n\r\n    @Input(\"pickerPlacement\")\r\n    public set placement(placement:PositioningPlacement) {\r\n        this.popup.config.placement = placement;\r\n    }\r\n\r\n    @Input(\"pickerTransition\")\r\n    public set transition(transition:string) {\r\n        this.popup.config.transition = transition;\r\n    }\r\n\r\n    @Input(\"pickerTransitionDuration\")\r\n    public set transitionDuration(duration:number) {\r\n        this.popup.config.transitionDuration = duration;\r\n    }\r\n\r\n    @Output(\"pickerSelectedDateChange\")\r\n    public onSelectedDateChange:EventEmitter<Date>;\r\n\r\n    @Output(\"pickerValidatorChange\")\r\n    public onValidatorChange:EventEmitter<void>;\r\n\r\n    constructor(public renderer:Renderer2,\r\n                element:ElementRef,\r\n                componentFactory:SuiComponentFactory,\r\n                public localizationService:SuiLocalizationService) {\r\n\r\n        super(renderer, element, componentFactory, SuiDatepicker, new PopupConfig({\r\n            trigger: PopupTrigger.Focus,\r\n            placement: PositioningPlacement.BottomLeft,\r\n            transition: \"scale\",\r\n            transitionDuration: 200\r\n        }));\r\n\r\n        // This ensures the popup is drawn correctly (i.e. no border).\r\n        this.renderer.addClass(this.popup.elementRef.nativeElement, \"ui\");\r\n        this.renderer.addClass(this.popup.elementRef.nativeElement, \"calendar\");\r\n\r\n        this.onLocaleUpdate();\r\n        this.localizationService.onLanguageUpdate.subscribe(() => this.onLocaleUpdate());\r\n\r\n        this.onSelectedDateChange = new EventEmitter<Date>();\r\n        this.onValidatorChange = new EventEmitter<void>();\r\n\r\n        this.mode = DatepickerMode.Datetime;\r\n    }\r\n\r\n    public popupOnOpen():void {\r\n        if (this.componentInstance) {\r\n            this.componentInstance.service.config = this.config;\r\n            this.componentInstance.service.localeValues = this.localeValues;\r\n            this.componentInstance.service.currentDate = this.initialDate || new Date();\r\n            this.componentInstance.service.selectedDate = this.selectedDate;\r\n            this.componentInstance.service.maxDate = this.maxDate;\r\n            this.componentInstance.service.minDate = this.minDate;\r\n\r\n            if (this.firstDayOfWeek != undefined) {\r\n                this.componentInstance.service.firstDayOfWeek = this.firstDayOfWeek;\r\n            }\r\n\r\n            this.componentInstance.service.reset();\r\n\r\n            this.componentInstance.service.onDateChange.subscribe((d:Date) => {\r\n                this.selectedDate = d;\r\n                this.close();\r\n            });\r\n        }\r\n    }\r\n\r\n    public ngOnChanges({ maxDate, minDate, mode }:SimpleChanges):void {\r\n        if (maxDate || minDate || mode) {\r\n            this.onValidatorChange.emit();\r\n        }\r\n    }\r\n\r\n    private onLocaleUpdate():void {\r\n        this._localeValues = this.localizationService.get().datepicker;\r\n    }\r\n\r\n    public validate(c:AbstractControl):ValidationErrors | null {\r\n        const value = c.value;\r\n\r\n        if (value != undefined) {\r\n            // We post process the min & max date because sometimes this puts the date outside of the allowed range.\r\n            if (this.minDate && value < this.minDate) {\r\n                return { suiMinDate: { required: this.minDate, actual: value } };\r\n            }\r\n\r\n            if (this.maxDate && value > this.maxDate) {\r\n                return { suiMaxDate: { required: this.maxDate, actual: value } };\r\n            }\r\n        }\r\n\r\n        // Angular expects null\r\n        // tslint:disable-next-line:no-null-keyword\r\n        return null;\r\n    }\r\n\r\n    public writeValue(value:Date | undefined):void {\r\n        this.selectedDate = value;\r\n\r\n        if (this.componentInstance) {\r\n            this.componentInstance.service.selectedDate = value;\r\n        }\r\n    }\r\n\r\n    @HostListener(\"keydown\", [\"$event\"])\r\n    public onKeyDown(e:KeyboardEvent):void {\r\n        if (e.keyCode === KeyCode.Escape) {\r\n            this.close();\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: \"[suiDatepicker]\",\r\n    host: { \"(pickerSelectedDateChange)\": \"onChange($event)\" },\r\n    providers: [customValueAccessorFactory(SuiDatepickerDirectiveValueAccessor)]\r\n})\r\nexport class SuiDatepickerDirectiveValueAccessor extends CustomValueAccessor<Date, SuiDatepickerDirective> {\r\n    constructor(public host:SuiDatepickerDirective) { super(host); }\r\n}\r\n\r\n@Directive({\r\n    selector: \"[suiDatepicker]\",\r\n    host: { \"(pickerValidatorChange)\": \"onValidatorChange()\" },\r\n    providers: [customValidatorFactory(SuiDatepickerDirectiveValidator)]\r\n})\r\nexport class SuiDatepickerDirectiveValidator extends CustomValidator<SuiDatepickerDirective> {\r\n    constructor(public host:SuiDatepickerDirective) { super(host); }\r\n}\r\n"]}