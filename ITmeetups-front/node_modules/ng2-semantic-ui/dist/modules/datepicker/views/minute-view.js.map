{"version":3,"file":"minute-view.js","sourceRoot":"","sources":["../../../../src/modules/datepicker/views/minute-view.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AACrD,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACzE,OAAO,EAAE,YAAY,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AAEjE,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EAAE,oBAAoB,EAAE,MAAM,oCAAoC,CAAC;AAC1E,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAEpD,IAAA;IAAgD,8CAAoB;;;;IACzD,8CAAS,GAAhB,UAAiB,KAAU;QACvB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;KAC5E;IAEM,8CAAS,GAAhB,UAAiB,KAAU;QACvB,MAAM,CAAC,IAAI,CAAC,KAAK;aACZ,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC;aAClB,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,QAAQ,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAhE,CAAgE,CAAC,CAAC;KACnF;IAEM,kDAAa,GAApB,UAAqB,IAAiB,EAAE,QAAa;QACjD,IAAI,CAAC,aAAa,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzH,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;KAC/B;qCAtBL;EAQgD,oBAAoB,EAenE,CAAA;AAfD,sCAeC;;IA2B0C,yCAAY;IAanD,+BAAY,QAAkB;eAC1B,kBAAM,QAAQ,EAAE,gBAAgB,CAAC,MAAM,EAAE,IAAI,0BAA0B,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;KACrG;IAdD,sBAAW,uCAAI;aAAf;YACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;;gBAErD,IAAM,cAAc,GAAU,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBAC/F,MAAM,CAAC,IAAI,UAAU,CAAC,cAAc,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aAC7F;YAAC,IAAI,CAAC,CAAC;;gBAEJ,IAAM,UAAU,GAAU,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC;gBACvF,MAAM,CAAC,IAAI,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;aACzF;SACJ;;;OAAA;;gBApCJ,SAAS,SAAC;oBACP,QAAQ,EAAE,0BAA0B;oBACpC,QAAQ,EAAE,gmBAqBb;iBACA;;;;gBAjDmB,SAAS;;gCAA7B;EAkD2C,YAAY;SAA1C,qBAAqB","sourcesContent":["import { Component, Renderer2 } from \"@angular/core\";\r\nimport { Util, DateUtil, DatePrecision } from \"../../../misc/util/index\";\r\nimport { CalendarView, CalendarViewType } from \"./calendar-view\";\r\nimport { CalendarItem } from \"../directives/calendar-item\";\r\nimport { CalendarMode } from \"../services/calendar.service\";\r\nimport { CalendarRangeService } from \"../services/calendar-range.service\";\r\nimport { DateParser } from \"../classes/date-parser\";\r\n\r\nexport class CalendarRangeMinuteService extends CalendarRangeService {\r\n    public calcStart(start:Date):Date {\r\n        return DateUtil.startOf(DatePrecision.Hour, DateUtil.clone(start), true);\r\n    }\r\n\r\n    public calcDates(start:Date):Date[] {\r\n        return Util.Array\r\n            .range(this.length)\r\n            .map(i => DateUtil.add(DatePrecision.Minute, DateUtil.clone(start), i * 5));\r\n    }\r\n\r\n    public configureItem(item:CalendarItem, baseDate:Date):void {\r\n        item.humanReadable = new DateParser(this.service.localeValues.formats.time, this.service.localeValues).format(item.date);\r\n        item.isOutsideRange = false;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: \"sui-calendar-minute-view\",\r\n    template: `\r\n<table class=\"ui celled center aligned unstackable table three column minute\">\r\n<thead>\r\n    <tr>\r\n        <th colspan=\"4\">\r\n            <sui-calendar-view-title [ranges]=\"ranges\" (zoomOut)=\"zoomOut()\">\r\n                {{ date }}\r\n            </sui-calendar-view-title>\r\n        </th>\r\n    </tr>\r\n</thead>\r\n<tbody>\r\n    <tr *ngFor=\"let group of ranges.current.groupedItems\">\r\n        <td class=\"link\"\r\n            *ngFor=\"let item of group\"\r\n            [calendarItem]=\"item\"\r\n            (click)=\"setDate(item)\">{{ item.humanReadable }}\r\n        </td>\r\n    </tr>\r\n</tbody>\r\n</table>\r\n`\r\n})\r\nexport class SuiCalendarMinuteView extends CalendarView {\r\n    public get date():string {\r\n        if (this.service.config.mode !== CalendarMode.TimeOnly) {\r\n            // Set minutes and seconds to 0\r\n            const dateTimeFormat:string = this.service.localeValues.formats.datetime.replace(/[ms]/g, \"0\");\r\n            return new DateParser(dateTimeFormat, this.service.localeValues).format(this.currentDate);\r\n        } else {\r\n            // Set minutes and seconds to 0\r\n            const timeFormat:string = this.service.localeValues.formats.time.replace(/[ms]/g, \"0\");\r\n            return new DateParser(timeFormat, this.service.localeValues).format(this.currentDate);\r\n        }\r\n    }\r\n\r\n    constructor(renderer:Renderer2) {\r\n        super(renderer, CalendarViewType.Minute, new CalendarRangeMinuteService(DatePrecision.Hour, 4, 3));\r\n    }\r\n}\r\n"]}